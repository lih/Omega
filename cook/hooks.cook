#include "functions"

wd = [collect pwd];
VAR = [BUILD]/var;

[VAR]/%0%.var: CONST/%0% {
  local dir = [dirname [target]];
  if [not [exists [dir]]] then
    mkdir -p [dir]
      set clearstat;
  echo [%0%] > [target];
}
CONST/%0%: {}

home = [getenv HOME];
function pretty = {
  return [fromto [home]/%0% \\~/%0% [arg]];
}

function hook = {
  local dir = [dirname [target]];
  if [not [exists [dir]]] then
    mkdir -p [dir]
      set clearstat;
  [HOOKS]/Printf "%-13s%s" [fromto [HOOKS]/% % [head [need]]] [pretty [target]];
  rm -f [target];
  [need] > [target];
}
function rawhook = {
  local dir = [dirname [target]];
  if [not [exists [dir]]] then
    mkdir -p [dir]
      set clearstat;
  [HOOKS]/Printf "%-13s%s" [fromto [HOOKS]/% % [head [need]]] [unsplit "\\ " [pretty [targets]]];
  [head [need]] [targets] [tail [need]];
}
function link = { 
  local dir = [dirname [target]];
  if [not [exists [dir]]] then
    mkdir -p [dir]
      set clearstat;
  rm -f [target];
  [HOOKS]/Printf '%-13s%s\\ -\\>\\ %s' Link [pretty [target]] [need];
  if [matches /%0% [need]] then
    src = [need];
  else 
    src = [wd]/[need];
  ln -s [src] [target]; 
}
function file-list = { 
  mkdir -p [dirname [target]];
  echo [wordlist 1 [@1] [need]] > [target];
}
function existing = {
  if [exists [@1]] then return [@1]; else return ;
}
